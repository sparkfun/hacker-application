<?xml version="1.0" encoding="utf-8" ?> 
<!--
Last updated: 1.0.0.2
This file is a template for creating your own configuration files for
the SQL and script injection engines of Visual Input Security.
While you can modify the existing files, often its easier to keep your settings
separate from the files shipped with the product.

Here are the steps to using this file:
1. In SetupVisualInputSecurity() of Global.asax, first call PeterBlum.VAM.Security.Globals.UseConfigFiles()
2. Edit the areas of this file that address your needs.
   - Any item whose enabled property is true will add
   - Any item whose enabled property is false will remove the matching item already loaded from UseConfigFiles().

Each section of this file has its own documentation.

REMINDER: Restart your web application after modifying this file.
-->
<injection>
<!--
The IllegalTags section populates the global property:
PeterBlum.VAM.Security.Globals.IllegalTags.

This is a list of HTML tag names that are never permitted on any field in this site. 
Each item must contain only the tag name, not the < or > characters.
For example, if this list contains the string "script", the <script> tag 
will never be permitted in any input. VISE performs a case insensitive match.

The tag format is:
<item action="add|remove|none" regex="true|false">value</item>
* The value is a tag name. It must be supplied. It supports regular expressions.
These attributes are optional:
* action= one of these values: "add", "remove", "none". If not specified, "add" is used.
  "add" - adds the value to the list. (It will not create duplicates in the list.)
  "remove" - removes the value from the list. Items are added in order specified in the config files.
     Use this to remove an item with the same value previously added to the list.
     Its the preferred approach over deleting the original item.
     This option is usually used in custom.config and updates to config files to
     avoid changing the original file.
  "none" - prevents the item from being used in any way. Just like commenting it out.
* regex=  - When "true", it indicate that the tagname is a regular expression.
  When regex is not supplied, it defaults to regex="false".
  If you use a regular expression that contains special XML characters, consider enclosing it in <![CDATA[tagname]]>
-->
<illegaltags>
<!-- this is an example
<item action="add">html</item>
-->
</illegaltags>

<!--
The illegalattributes section populates the global property:
PeterBlum.VAM.Security.Globals.IllegalAttributes.

A list of HTML attribute names that are never permitted in any HTML tag throughout this site. 
Of special concern are attributes that can run scripts, like the DHTML and DOM event handlers, 
all which start with "on" (like "onclick"). 
However, you can block other attributes. VISE performs a case insensitive match.

The tag format is:
<item action="add|remove|none" regex="true|false">value</item>
* The value is an attribute name. It must be supplied. It supports regular expressions.
These attributes are optional:
* action= one of these values: "add", "remove", "none". If not specified, "add" is used.
  "add" - adds the value to the list. (It will not create duplicates in the list.)
  "remove" - removes the value from the list. Items are added in order specified in the config files.
     Use this to remove an item with the same value previously added to the list.
     Its the preferred approach over deleting the original item.
     This option is usually used in custom.config and updates to config files to
     avoid changing the original file.
  "none" - prevents the item from being used in any way. Just like commenting it out.
* regex=  - When "true", it indicate that the tagname is a regular expression.
  When regex is not supplied, it defaults to regex="false".
  If you use a regular expression that contains special XML characters, consider enclosing it in <![CDATA[tagname]]>
-->
<illegalattributes>
<!-- this is an example
<item action="add" regex="false">href</item>
-->
</illegalattributes>

<!--
The illegalattributecontents section populates the global property:
PeterBlum.VAM.Security.Globals.IllegalAttributeContents.

A list of strings that are found inside an HTML attribute but are never 
permitted on any input throughout this site. Anything in this list is not permitted 
anywhere inside the input text, not just inside an attribute or HTML tag. VISE performs a case insensitive match.

The tag format is:
<item action="add|remove|none" regex="true|false">value</item>
* The value is the attribute content. It must be supplied. It supports regular expressions.
These attributes are optional:
* action= one of these values: "add", "remove", "none". If not specified, "add" is used.
  "add" - adds the value to the list. (It will not create duplicates in the list.)
  "remove" - removes the value from the list. Items are added in order specified in the config files.
     Use this to remove an item with the same value previously added to the list.
     Its the preferred approach over deleting the original item.
     This option is usually used in custom.config and updates to config files to
     avoid changing the original file.
  "none" - prevents the item from being used in any way. Just like commenting it out.
* regex=  - When "true", it indicate that the tagname is a regular expression.
  When regex is not supplied, it defaults to regex="false".
  If you use a regular expression that contains special XML characters, consider enclosing it in <![CDATA[tagname]]>
-->
<illegalattributecontents>
<!-- this is an example
<item action="add" regex="false">javascript:</item>
-->
</illegalattributecontents>

<!--
The customscriptexpressions section adds your own rules to the
Script Detection Engine. See the PeterBlum.VAM.Security.CustomScriptExpression()
method for details in the User's Guide.

Your rules are regular expressions which look at the full text of each input with a case insensitive match.
Your expressions are defined along with an error message to log when detected.

The tag format is:
<item message="your error message" >regular expression</item>
* The value (regular expression) must be supplied. 
  If you use a regular expression that contains special XML characters, consider enclosing it in <![CDATA[tagname]]>
These attributes are required:
* message= - The error message to write to the log file when this expression finds a match.
-->
<customscriptexpressions>
<!-- this example looks for the DHTML method 'alert('
<item message="alert() function call">alert\(</item>
-->
</customscriptexpressions>


<!--
The illegalsqlelements section populates the global property:
PeterBlum.VAM.Security.Globals.IllegalSQLElements.

A list of terms that are never permitted in any input. This can be SQL keywords, SQL patterns, 
table names and column names. This list is used with all SQL Detection Levels.
For example, if this list contains the string "shutdown", no text will ever be permitted to contain the text "shutdown".
Suggestion: Use only phrases that would not normally appear in human language. 
For example, the prefined list looks for "set @[any variable name]". That is unique to the SQL language.
If you have very unique table and column names, you can add them here to guarantee that the hacker cannot ever enter them.
If you have table and column names that are likely to appear in human language, 
enter them into <databaseelementnames>.

VISE performs a case insensitive match. If you enter multiple words, separate them with spaces. 
VISE will replace the spaces with matching rules to a variety of ways to separate words 
including multiple spaces, new lines, and SQL comment phrases.

The tag format is:
<item action="add|remove|none" regex="true|false">value</item>
* The value is the illegal sql element. It must be supplied. It supports regular expressions.
These attributes are optional:
* action= one of these values: "add", "remove", "none". If not specified, "add" is used.
  "add" - adds the value to the list. (It will not create duplicates in the list.)
  "remove" - removes the value from the list. Items are added in order specified in the config files.
     Use this to remove an item with the same value previously added to the list.
     Its the preferred approach over deleting the original item.
     This option is usually used in custom.config and updates to config files to
     avoid changing the original file.
  "none" - prevents the item from being used in any way. Just like commenting it out.
* regex=  - When "true", it indicate that the tagname is a regular expression.
  When regex is not supplied, it defaults to regex="false".
  If you use a regular expression that contains special XML characters, consider enclosing it in <![CDATA[tagname]]>
-->
<illegalsqlelements>
<!-- this is an example
<item action="add" regex="false">HKEY</item>
-->
</illegalsqlelements>

<!--
The initialsqlkeywords section populates the global property:
PeterBlum.VAM.Security.Globals.InitialSQLKeywords.

A collection of SQL keywords that appear at the beginning of a SQL statement. Their use depends 
on the SQL Detection Level. This should be a partial list of SQL keywords. Those that can alter 
the structure of your database should be defined in <dangeroussqlkeywords>. 
<initialsqlkeywords> should contain more common keywords like "select", "begin", and "readtext". 
This list is combined with <dangeroussqlkeywords> for many searches.
VISE performs a case insensitive match. 

The tag format is:
<item action="add|remove|none" regex="true|false">value</item>
* The value is a SQL keyword. It must be supplied. It supports regular expressions.
These attributes are optional:
* action= one of these values: "add", "remove", "none". If not specified, "add" is used.
  "add" - adds the value to the list. (It will not create duplicates in the list.)
  "remove" - removes the value from the list. Items are added in order specified in the config files.
     Use this to remove an item with the same value previously added to the list.
     Its the preferred approach over deleting the original item.
     This option is usually used in custom.config and updates to config files to
     avoid changing the original file.
  "none" - prevents the item from being used in any way. Just like commenting it out.
* regex=  - When "true", it indicate that the tagname is a regular expression.
  When regex is not supplied, it defaults to regex="false".
  If you use a regular expression that contains special XML characters, consider enclosing it in <![CDATA[tagname]]>
-->
<initialsqlkeywords>
<!--
<item action="add" regex="false">select</item>
-->
</initialsqlkeywords>

<!--
The dangeroussqlkeywords section populates the global property:
PeterBlum.VAM.Security.Globals.DangerousSQLKeywords.

A list of SQL keywords that appear at the beginning of a SQL statement. 
Typically this list includes keywords that can alter the structure or behavior of your database. 
Some examples include 'create', 'drop', and 'commit'. These keywords should not be included in InitialSQLKeywords.
Their use depends on the SQL Detection Level.
VISE performs a case insensitive match.


The tag format is:
<item action="add|remove|none" regex="true|false">value</item>
* The value is a SQL keyword. It must be supplied. It supports regular expressions.
These attributes are optional:
* action= one of these values: "add", "remove", "none". If not specified, "add" is used.
  "add" - adds the value to the list. (It will not create duplicates in the list.)
  "remove" - removes the value from the list. Items are added in order specified in the config files.
     Use this to remove an item with the same value previously added to the list.
     Its the preferred approach over deleting the original item.
     This option is usually used in custom.config and updates to config files to
     avoid changing the original file.
  "none" - prevents the item from being used in any way. Just like commenting it out.
* regex=  - When "true", it indicate that the tagname is a regular expression.
  When regex is not supplied, it defaults to regex="false".
  If you use a regular expression that contains special XML characters, consider enclosing it in <![CDATA[tagname]]>
-->
<dangeroussqlkeywords>
<!-- this is an example
<item action="add" regex="false">drop</item>
-->
</dangeroussqlkeywords>

<!--
The databaseelementnames section populates the global property:
PeterBlum.VAM.Security.Globals.DatabaseElementNames.

This is a list of the table names and more important column names in your database.
You should also put the database name in here. 
These names are used to support the Statement Detection Algorithm used by SQL Detection Level 
of MediumLow through MediumHigh.
Suppose that you have a table named "Clients" which is in this list. 
The SQL Detection Engine will have a much better chance of detecting this as an attack: SELECT * from Clients.

Note: It is a good idea to create table names that are not found in human language. 
For example, use "TB_Clients" instead of "Clients". This avoids having false positives 
("We've given you a select choice of clients from our records."). It also makes it harder for 
hackers to guess at likely names.

Consider adding all table names and some of the more important field names to this list. 
Primary key fields and fields used in JOINS are good choices. However, remember that the 
larger the list, the more CPU processing is needed for MediumLow to MediumHigh searches.
If you have very unique table and field names – those that never appear in human language, 
consider adding them into <illegalsqlelements>.

VISE performs a case insensitive match.

The tag format is:
<item action="add|remove|none" regex="true|false">value</item>
* The value is a table or field name. It must be supplied. It supports regular expressions.
These attributes are optional:
* action= one of these values: "add", "remove", "none". If not specified, "add" is used.
  "add" - adds the value to the list. (It will not create duplicates in the list.)
  "remove" - removes the value from the list. Items are added in order specified in the config files.
     Use this to remove an item with the same value previously added to the list.
     Its the preferred approach over deleting the original item.
     This option is usually used in custom.config and updates to config files to
     avoid changing the original file.
  "none" - prevents the item from being used in any way. Just like commenting it out.
* regex=  - When "true", it indicate that the tagname is a regular expression.
  When regex is not supplied, it defaults to regex="false".
  If you use a regular expression that contains special XML characters, consider enclosing it in <![CDATA[tagname]]>
-->
<databaseelementnames>
<!-- example using the table named "Clients" 
<item action="add" >Clients</item>
-->
</databaseelementnames>

<!--
The sqlfunctions section populates the global property:
PeterBlum.VAM.Security.Globals.SqlFunctions.

This list of SQL function names, such as CHAR() and ISNULL(). They are used by the Statement Detection Algorithm
and Common Hacking Patterns Algorithm to detect likely SQL.

All functions will be found only if they are immediately followed by a left parenthesis
(MS SQL permits spaces, newlines and comments between the name and the parenthesis. This 
is handled automatically for you.)
Define the complete function name without the parenthesis.

VISE performs a case insensitive match.

The tag format is:
<item action="add|remove|none" >value</item>
* The value is a SQL function name. It must be supplied.
These attributes are optional:
* action= one of these values: "add", "remove", "none". If not specified, "add" is used.
  "add" - adds the value to the list. (It will not create duplicates in the list.)
  "remove" - removes the value from the list. Items are added in order specified in the config files.
     Use this to remove an item with the same value previously added to the list.
     Its the preferred approach over deleting the original item.
     This option is usually used in custom.config and updates to config files to
     avoid changing the original file.
  "none" - prevents the item from being used in any way. Just like commenting it out.
-->
<sqlfunctions>
<!-- example using the function named "LTrim" 
<item action="add" >ltrim</item>
-->
</sqlfunctions>

<!--
The weightedkeywords section populates the data for the Statement Detection Algorithm.
See the User's Guide for a description. It is associated with the
PeterBlum.VAM.Security.Globals.DefineWeightedKeyword() method.

The SQL Detection Levels of MediumLow to MediumHigh use the Statement Detection Algorithm 
to detect SQL statements within text. The process detects a common SQL keyword that begins
a SQL statement, such as SELECT, INSERT, and UPDATE. These are called "initial keywords". 
Then it looks for additional SQL keywords associated with the initial keyword, such as 
FROM, WHERE, and ORDER BY. These are called "supporting keywords". Finally it looks for 
any of your own table or column names, defined in the DatabaseElementNames property.
Each SQL Detection Level establishes a numeric value call the "total weight tolerance". 
Each supporting keyword has its own weight which is a numeric value. If the total weight 
of the supporting keywords found meets or exceeds the total weight tolerance, an attack is detected. 
If any item in DatabaseElementNames is found after the initial keyword, the total weight is increased by 6.

The tag format is:
<item initial="keyword" supporting="keyword" weight="[1-9]" action="add|remove|none" />
* initial= is a SQL keyword that you want to support. Case insensitive.
* supporting= is a SQL keyword that supports the initial keyword. For example, "FROM" is a supporting
  keyword for "SELECT". Case insensitive.
  If the keyword contains multiple words separated by spaces,
  VISE will replace the spaces with matching rules to a variety of ways to
  separate words including multiple spaces, new lines, and SQL comment phrases.
* weight= is a number from 1 to 9. 
  When there has already been an initial and supporting keyword that matches,
  this entry will replace the weight.
* action= one of these values: "add", "remove", "none". If not specified, "add" is used.
  "add" - uses the weight. If a previous weight was specified, it will be replaced.
  "remove" - removes the supporting keyword.
  "none" - prevents the item from being used in any way. Just like commenting it out.
-->

<weightedkeywords>
<!-- this is an example
<item initial="delete" supporting="as" weight="1" action="add" />
-->
</weightedkeywords>

<!--
The customsqlexpressions section adds your own rules to the
SQL Detection Engine. See the PeterBlum.VAM.Security.CustomSQLExpression()
method for details in the User's Guide.

Your rules are regular expressions which look at the full text of each input with a case insensitive match.
Your expressions are defined along with an error message to log when detected and
the minimum SQL Detection Level to run it.

The tag format is:
<item message="your error message" level="low|mediumlow|medium|mediumhigh|high">regular expression</item>
* The value (regular expression) must be supplied. 
  If you use a regular expression that contains special XML characters, consider enclosing it in <![CDATA[tagname]]>
These attributes are required:
* message= - The error message to write to the log file when this expression finds a match.
* level= - The minimum SQL Detection Level to run this expression. Must be one of these:
  low  mediumlow  medium  mediumhigh  high
-->
<customsqlexpressions>
<!-- this example looks for the DHTML method 'alert('
<item message="The reserved word 'admin' was found." level="medium">admin(\W|$)</item>
-->
</customsqlexpressions>

<!--
Levels MediumLow, Medium and MediumHigh have rules that permit customization, especially
of the Statement Detection Algorithm.
Each <rule> item has these attributes:
* level=  ("mediumlow|medium|mediumhigh") (required) - SQLDetectionLevel

The following apply only to the Statement Detection Algorithm:
* totalweighttolerance=  (positive integer) - The weight required for the supporting keywords, 
  database element names, and sql functions of one SQL statement to report an attack.
* combinedweighttolerance= (positive integer) - if one initial keyword doesn't have the weight
  to reach TotalWeightTolerance, continue looking at other initial keywords. The weights 
  of them are combined and compared to this value. If they exceed this value, an attack is detected.
* databaseelementweight= (positive integer) - When an item in Globals.DatabaseElementNames is found, 
  this is the weight applied to it.
* mindatabaseelements= (integer, 0 and higher) - When > 0, there must be at least the number 
  specified here of unique elements in Globals.DatabaseElementNames found in the text before the 
  SDA reports any errors. This rule is not used when an item matching a SQL function name is found.
* sqlfunctionweight= (integer, 0 and higher) - When > 0, look for common SQL functions. For each 
  unique function name found, apply this weight.
* minelementsfound=  (integer, 0 and higher) - Each supporting keyword, database element name, 
  and sql function name found is an "element".
  There must be this many elements found before any error is reported. Generally this number
  should be kept low, like 2-4. 0 is valid. It’s valid to use a high number like 10 although that
  may ignore too many cases.
* limitsearchlength= (integer, 0 and higher) - When > 0, search for the first SQL statement within 
  this many characters of the text. This will avoid finding possible supporting keywords in other human language sentences.
  This is a length of non-space characters that are not nested within sql comments (/* */).
* requireleadquote= ("true|false") - When true, there must be a lead quote in the first "sentence". A lead quote
  indicates the closure of a string within some ad-hoc code and starts most hacks.
  When false, you are seeking evidence of sql statements without caring that a hack is indicated
  due to the lack of the quote.
  
These rules do not apply to the Statement Detection Algorithm:  
* allowsqlcomment= ("true|false") - When true, the SQL comment (/* */) indicator is allowed. 
  When false, it is not and an error is reported. The software only looks for the presence of /* to detect it.
-->
<levelrules>
  <rule level="mediumhigh" totalweighttolerance="8" combinedweighttolerance="12" databaseelementweight="6"
     mindatabaseelements="0" sqlfunctionweight="7" minelementsfound="0"
     limitsearchlength="0" requireleadquote="false" allowsqlcomment="false" />
  <rule level="medium" totalweighttolerance="11" combinedweighttolerance="18" databaseelementweight="6"
     mindatabaseelements="0" sqlfunctionweight="7" minelementsfound="3"
     limitsearchlength="100" requireleadquote="true" allowsqlcomment="false" />
  <rule level="mediumlow" totalweighttolerance="14" combinedweighttolerance="24" databaseelementweight="6"
     mindatabaseelements="1" sqlfunctionweight="7" minelementsfound="4"
     limitsearchlength="80" requireleadquote="true" allowsqlcomment="true" />

</levelrules>

</injection>