<?xml version="1.0" encoding="UTF-8"?>
<!--
VAM is highly customizable. This file is part of that customization.
It extends or overrides the "factory defaults" which are defined in VAM.config.

Both this file (Custom.VAM.Config) and VAM.config must reside in the
[webapplicationroot]/VAM folder or the alternative
defined in web.config, in the <AppSettings> under the name "VAM_ConfigFilePath".
-->
<configuration>
   <GlobalProperties>
<!--
   The PeterBlum.VAM.Globals class has a number of static/shared properties that supplied
   default values to VAMPage's properties and a few properties used globally on other controls.
   You can override these property defaults here. For example, if you always want VAMPage.FocusOnSubmit
   to be true, you would normally set Globals.DefaultFocusOnSubmit in your Application_Start method.
   Here you simply define the name of the property and give its value in this format:
   <Property name="propertyname" value="value" />
   where propertyname is the name of the property within Globals (not in VAMPage!)
   and value is the value to assigned to the property. The value should support conversion from
   string to the actual type using the TypeConverter object for the property.
   For example, to set Globals.DefaultFocusOnSubmit to true, use this:
   <Property name="DefaultFocusOnSubmit" value="true" />
-->   
<!--   
      <Property name="DefaultBlinkTime" value="500" />
-->      
   </GlobalProperties>
   <StringLookup>
<!--
   When you use the String Lookup system, you can configure it to use resource files
   or database through properties here. The following text descriptions
   will help you setup each value.
-->
<!-- When DesignModeOn is true, design mode will attempt to lookup strings.
   Turn it off if your datasources are not available in design mode (such as no access to the database) -->
     <Add name="DesignModeOn" value="true" />
     
<!-- When using Resource files, you must specify the assembly which contains the resources.
    If it is in the web application, use the name of the dll for the web application.
    Do not specify the "DLL" extension.
-->
      <Add name="ResAssemblyName" value="" />

<!-- When using Resource files, the default names are "VAMMessages.resx", "VAMLabels.resx", and "VAMMisc.resx".
   If you are using other file names, assign them here WITHOUT the resx extension.
   You can assign all three to the same resource file if you don't need separate groups.
-->
      <Add name="MessageResXFile" value="VAMMessages" />  
      <Add name="LabelResXFile" value="VAMLabels" />   
      <Add name="MiscResXFile" value="VAMMisc" />
      
<!-- When using Database lookup, supply a ConnectionString to either an MSSql or OleDb database
   using one of these -->
      <Add name="SqlConnectionString" value="" />  
      <Add name="OleDbConnectionString" value="" />        
   </StringLookup>
   <RegExPatterns>
<!-- 
   When setting up the Expression property in the VS.NET Property Editor 
   a list of names and the associated expressions/patterns are defined for you. 
   This section defines the contents of that list.
   You can customize this list in three ways: Add, replace, or delete.
   The <RegExPattern> tags define the name shown in the list and the value assigned
   when the name is selected.
   1. Add. Define the following row where the name attribute is a name not already in the list.
      The name will be shown in the Property Editor list.
      <RegExPattern name="name" >pattern</RegExPattern>
   2. Replace an existing definition with a different pattern. Define the following row
      where the name matches one already in the list. Give it a new pattern.
      <RegExPattern name="name" >pattern</RegExPattern>
   3. Delete a row. Define the following row where the name matches one already in the list.
      <RegExPattern name="name" enabled="false" />
-->      
   </RegExPatterns>
   <DataTypes>
<!--
   When setting up the DataType property in the VS.NET Property Editor 
   a list of VAMTypeConverters is defined for you. This section defines the contents
   of that list and the object created when a name is found in the list.
   You can customize this list in three ways: Add, replace, or delete.
   The <DataType> tags define the VAMTypeConverter class or subclass
   and a list of properties that override the default properties of that class.
   1. Add. Define a new name and use any VAMTypeConverter class you need. Provide the properties
      that customize the defaults of the VAMTypeConverter instance.
      <DataType name="Int64" type="PeterBlum.VAM.VAMTypeConverter" [assembly="PeterBlum.VAM"]>
         <property name="Name" value="64 bit Integer"/>
         <property name="DataType" value="System.Int64"/>
      </DataType>
      NOTE: The assembly property is required when the type doesn't specify PeterBlum.VAM.
   2. Replace. Define the same name as the one you want to replace, using the above structure.
   3. Delete. Define the following row using the same name as the one you want to delete.
      <DataType name="name" Enabled=false />
   Notes:
   * Name is case insensitive
   * When the Type is not in PeterBlum.VAM.dll, you must specify the assembly attribute.
     It should not include the ".dll" extension. Be sure the assembly is in the \bin folder
     or Global Assembly Cache. The name can be fully qualified (public key, culture, version).
   * Property tags are not required. Declare them if you want to replace the default.
   * Property name attributes ARE case sensitive.
-->
    
   </DataTypes>
   <ErrorFormatters>
<!--   
   When setting up the ErrorFormatter property in the VS.NET Property Editor 
   a list of ErrorFormatters is defined for you. This section defines the contents
   of that list and the object created when a name is found in the list.
   You can customize this list in three ways: Add, replace, or delete.
   The <ErrorFormatter> tags define a BaseErrorFormatter subclass
   and a list of properties that override the default properties of that class.
   1. Add. Define a new name and use any VAMTypeConverter class you need. Provide the properties
      that customize the defaults of the VAMTypeConverter instance.
      <ErrorFormatter name="Our Image with Alert" type="PeterBlum.VAM.AlertImageErrorFormatter"  [assembly="PeterBlum.VAM"]>
         <Property name="ImageURL" value="MyValidatorIcon.gif"/>
      </ErrorFormatter>
      When declaring child properties of the Font property, use this syntax:
      <ErrorFormatter name="Our Image with Alert" type="PeterBlum.VAM.AlertImageErrorFormatter">
         <Object name="Font">
            <Property name="propertyname" value="propertyvalue" />
         </Object>
      </ErrorFormatter>
      NOTE: The assembly property is required when the type doesn't specify PeterBlum.VAM.

   2. Replace. Define the same name as the one you want to replace, using the above structure.
   3. Delete. Define the following row using the same name as the one you want to delete.
      <ErrorFormatter name="name" enabled=false />
   Notes:
   * Name is case insensitive
   * When the Type is not in PeterBlum.VAM.dll, you must specify the assembly attribute.
     It should not include the ".dll" extension. Be sure the assembly is in the \bin folder
     or Global Assembly Cache. The name can be fully qualified (public key, culture, version).
   * Property tags are not required. Declare them if you want to replace the default.
   * Property name attributes ARE case sensitive.
-->
<!--
      <ErrorFormatter name="Text" type="PeterBlum.VAM.TextErrorFormatter">
         <Property name="Display" value="Dynamic" />
         <Object name="Font">
            <Property name="Name" value="Courier New" />
         </Object>
      </ErrorFormatter>
-->
   </ErrorFormatters>
   <Conditions>
<!--   
   When setting up the Condition property in the VS.NET Property Editor 
   a list of Conditions is defined for you. This section defines the contents
   of that list and the object created when a name is found in the list.
   You can customize this list in three ways: Add, replace, or delete.
   The <Condition> tags define a non-abstract BaseCondition subclass
   and a list of properties that override the default properties of that class.
   1. Add. Define a new name and use any BaseCondition subclass you need. Provide the properties
      that customize the defaults of the BaseCondition instance.
      <Condition name="name" type="PeterBlum.VAM.RequiredTextCondition" [assembly="PeterBlum.VAM"]>
         <property name="Trim" value="false"/>
      </Condition>
      NOTE: The assembly property is required when the type doesn't specify PeterBlum.VAM.
   2. Replace. Define the same name as the one you want to replace, using the above structure.
      Generally the idea is to provide new default properties for when the condition
      is selected in the Property Editor.
   3. Delete. Define the following row using the same name as the one you want to delete.
      <Condition name="name" enabled=false />
   Notes:
   * Name is case insensitive
   * When the Type is not in PeterBlum.VAM.dll, you must specify the assembly attribute.
     It should not include the ".dll" extension. Be sure the assembly is in the \bin folder
     or Global Assembly Cache. The name can be fully qualified (public key, culture, version).
   * Property tags are not required. Declare them if you want to replace the default.
   * Property name attributes ARE case sensitive.
-->
<!--
      <Condition name="NoTrimRequiredTextCondition" type="PeterBlum.VAM.RequiredTextCondition" >
         <property name="Trim" value="false" />
      </Condition>
-->
   </Conditions>
   <CreditCards>
<!--
   The CreditCardNumberCondition and CreditCardNumberValidator use a list of credit cards
   defined here and in the VAM.config file when the property CheckByBrand is true.
   The <CreditCard> tags define an entry that appears in the Globals.CreditCards
   collection.
   You can add to Globals.CreditCards or delete entries defined by VAM.config:
   1. Add. Define a new credit card.
      <CreditCard name="name" length="15" prefixes="412|413" />
      Name attribute - Generally you use the brand name of the card. It must be unique
         amongst this list and those in the VAM.config file. The value is case insensitive.
      Length attribute - The number of characters required in the card number. Must be 10 or higher.
      Prefixes attribute - One or more strings that start the card number, separated by a pipe (|)
         character.
      
   2. Delete. Define the following row using the same name as the one you want to delete.
      <CreditCard name="name" enabled="false" />
-->   
   </CreditCards>
   <ThirdPartyControls>
<!--
Any third party controls that act like Microsoft's TextBox, RadioButton, CheckBox, ListBox or DropDownList
but are not subclassed from those controls can still be used in VAM by defining them here.
Once defined, VAM will list them in the ControlIDToEvaluate (and similar properties) in the Properties Editor
and various conditions that support the Microsoft controls will support the third party control.
NOTE: If the control supports the System.Web.UI.ValidationPropertyAttribute, it is automatically supported
and does not need to be added here.
Add a <ThirdPartyControl> tag for each third party control. Here are the attributes for the <ThirdPartyControl> tag:
* class - the full name of the class including the namespace. For example, "System.Web.UI.WebControls.TextBox"
* sameas - one of these labels, in lowercase only: textbox, checkbox, radiobutton, listbox, dropdownlist
* property - the name of the property on the control that contains the value. For example, 'Text', 'SelectedIndex', and 'Checked'.
* itemsproperty - on a listbox supporting multiple selections, the name of the property containing the list
   of items. For example 'Items'.
* itemsselectedproperty - on a listbox supporting multiple selections, the name of the property on an individual
   item that indicates the item is selected. For example, 'selected'.
   
Here is an example of a textbox, where the class is JoeSoft.Controls.TextBox, and the property is 'Text'.
      <ThirdPartyControl class="JoeSoft.Controls.TextBox" sameas="textbox" property="Text" />
Here is an example of a listbox, whose properties are just like Microsoft's ListBox.
      <ThirdPartyControl class="JoeSoft.Controls.ListBox" sameas="listbox" property="SelectedIndex" itemsproperty="Items" itemsselectedproperty="Selected" />
-->   
   </ThirdPartyControls>
  <ControlHookupMethods>
    <!--
      **** Depreciated in v2.0.1. Use <GetChildMethods> instead****
      When extending VAM to support controls that have multiple child elements, like
      the checkboxlist and radiobuttonlist do, you supply a ControlHookupMethod in JavaScript
      and define a ControlHookupMethod tag to associate the control class with the method name.
      The structure of the tag is:
      <ControlHookupMethod type="The control class" assembly="containing assembly" method="javascript method name" />
      NOTE: If you override VAMTypeConverter, you can supply the same information in the
      GetControlHookupMethod method.
  -->
  </ControlHookupMethods>
  <GetChildMethods>
    <!--
      When extending VAM to support controls that have multiple child elements, like
      the checkboxlist and radiobuttonlist do, you supply a GetChild Method in JavaScript
      and define a GetChildMethod tag to associate the control class with the method name.
      The structure of the tag is:
      <GetChildMethod type="The control class" assembly="containing assembly" method="javascript method name" />
  -->
  </GetChildMethods>
</configuration>