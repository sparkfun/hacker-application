This is a quick description of each of the code files that I'm including.

Note: At the time that I coded all of these I had done no OO programming.
	Since then I have been programming in Ruby (very OO language) and
	I am quickly adopting OO standards in all of my new programs.  I am
	including a quick "How I would convert each to OO." if I worked on 
	them again.

docs.php, docs_sub.php:
    -Description-
	These two files are a little bit dirty, but it was designed as a document upload
	portal with version control (using a datetime field in MySQL). I would
	like to see a better algorithm for version control, but this was not a priority.

    -How I would convert to OO-
    	-UserInput class to parse $_GET and $_PUT and control flow
        -Create a document class (this is essentially docs_sub.php)
	  -method definitions:
	    -version (list, retrieve, add)
	    -add
	    -delete

message_hub.php, message_recipients.php
   -Description-
       These files compose a simple internal messaging system.  The idea here is that people
       could send something akin to e-mail to everyone working on the system.  There was also
       a goal of being able to get a site-wide message out to anyone logged in.  I focused a lot
       on a js based gmail style find-as-you-type recipient search, with highlighting, which is the function
       of message_recipeints.php.

   -How I would convert to OO-
       -Message class for all message functions
         -method definitions (similar to message_hub.php functions)
	   -compose
	   -inbox
	   -reply
	   -delete
	   -view
        -Recipient class for AJAX search (if full app was OO may have fit as method into User class)
	  -method definitions
	    -find
	    -stylize
	    -recipient-link

----Add ruby OO Code here (gphone-plotter.rb)----
Best example of OO coding I have.  Looking forward to more OO in the future.
